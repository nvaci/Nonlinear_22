dat<-read.table('GermanDatabase.txt', sep='\t', header=T)
plot(dat$Age, dat$Rating)
table(dat$Player)
dat1<-table(dat$Player)
dat1<-as.data.frame(table(dat$Player))
dat2=sample(dat1$Var1, 300)
dat2=as.data.frame(sample(dat1$Var1, 300))
?sample
View(dat2)
names(dat2)='Player'
dat3=merge(dat2, dat, by='Player')
View(dat3)
plot(dat3$Age, dat3$Rating)
lm<-lm(Rating~Age, data=dat3)
summary(lm1)
summary(lm)
abline(lm)
write.table(dat3,'ChessDevelopment.txt', sep='\t')
par(mfrow=c(1,3), bty='n',mar = c(5, 4, .1, .1), cex=1.1, pch=16)
plot(dat3$Age, dat3$Rating)
par(mfrow=c(1,1), bty='n',mar = c(5, 4, .1, .1), cex=1.1, pch=16)
plot(dat3$Age, dat3$Rating)
pred<-predict(lmLin)
lmLin<-lm(Rating~Age, data=Chess)
lmLin<-lm(Rating~Age, data=dat3)
chess<-read.table('ChessDevelopment',sep='\t', header=T)
chess<-read.table('ChessDevelopment.txt',sep='\t', header=T)
lmLin<-lm(Rating~Age, data=chess)
coefficients(lmLin)
pred<-predict(lmLin)
coefficients(lmLin)[1]
coefficients(lmLin)[1]*2
abline(coefficients(lmLin)[1]+coefficients(lmLin)[2]*1:10)
x=10:80
y=coefficients(lmLin)[1]+coefficients(lmLin)[2]*x
abline(y)
line(y)
plot(x,y, type=';')
plot(dat3$Age, dat3$Rating)
plot(x,y, type='l', new=T)
plot(x,y, type='l', new=F)
plot(dat3$Age, dat3$Rating)
plot(x,y, type='l', new=F)
plot(dat3$Age, dat3$Rating, ylim=c(0,3000))
?plot
plot(dat3$Age, dat3$Rating, ylim=c(0,3000))
lines(x,y)
lmQuad<-lm(Rating~poly(Age, degree=2, raw=T), data=chess)
coefficients(lmLin)
lmQuad<-lm(Rating~poly(Age, degree=2, raw=T), data=chess)
coefficients(lmQuad)
y=coefficients(lmLin)[1]+coefficients(lmLin)[2]*x+coefficients(lmLin)[3]*x^2
lines(x,y)
lines(x,y, col='red')
y
y=coefficients(lmQuad)[1]+coefficients(lmQuad)[2]*x+coefficients(lmQuad)[3]*x^2
y
lines(x,y, col='red')
lmLin<-lm(Rating~Age+I(Age^2), data=chess)
summary(lmLin)
anova(lmLin,lmQuad,lmCub)
lmQuad<-lm(Rating~poly(Age, degree=2, raw=T), data=chess)
coefficients(lmQuad)
lmCub<-lm(Rating~poly(Age, degree=3, raw=T), data=chess)
coefficients(lmCub)
anova(lmLin,lmQuad,lmCub)
t1<-AIC(lmLin,lmQuad,lmCub)
View(t1)
t1<-cbind(BIC(lmLin,lmQuad,lmCub))
t1
t1<-cbind(t1,BIC(lmLin,lmQuad,lmCub))
t1<-AIC(lmLin,lmQuad,lmCub)
t1<-cbind(t1,BIC(lmLin,lmQuad,lmCub))
require(lme4)
lmerCub<-lmer(Rating~poly(Age, degree=3, raw=T)+(1|Player), data=chess)
summary(lmerCub)
print(summary(lmerCub), cor=F)
par(mfrow=c(1,1), bty='n',mar = c(5, 4, .1, .1), cex=1.1, pch=16)
plot(chess$Age, chess$Rating)
y=coefficients(lmCub)[1]+coefficients(lmCub)[2]*x+coefficients(lmCub)[3]*x^2+coefficients(lmCub)[4]*x^3
lines(x,y, col='red',lwd=3)
y=coefficients(lmerCub)[1]+coefficients(lmerCub)[2]*x+coefficients(lmerCub)[3]*x^2+coefficients(lmerCub)[4]*x^3
coefficients(lmerCub)[1]
coefficients(lmerCub)
fixef(lmerCub)
fixef(lmerCub)[1]
y=fixef(lmerCub)[1]+fixef(lmerCub)[2]*x+fixef(lmerCub)[3]*x^2+fixef(lmerCub)[4]*x^3
y
par(mfrow=c(1,1), bty='n',mar = c(5, 4, .1, .1), cex=1.1, pch=16)
plot(chess$Age, chess$Rating)
lines(x,y, col='red',lwd=3)
require(lme4)
lmerCub<-lmer(Rating~poly(Age, degree=3, raw=T)+(1+Age|Player), data=chess)
summary(lmerCub)
y=fixef(lmerCub)[1]+fixef(lmerCub)[2]*x+fixef(lmerCub)[3]*x^2+fixef(lmerCub)[4]*x^3
lines(x,y, col='red',lwd=3)
require(lme4)
lmerCub<-lmer(Rating~poly(Age, degree=3, raw=T)+(1+Age|Player)+(0+I(Age^2)|Player), data=chess)
summary(lmerCub)
par(mfrow=c(1,1), bty='n',mar = c(5, 4, .1, .1), cex=1.1, pch=16)
plot(chess$Age, chess$Rating)
y=coefficients(lmCub)[1]+coefficients(lmCub)[2]*x+coefficients(lmCub)[3]*x^2+coefficients(lmCub)[4]*x^3
y1=fixef(lmerCub)[1]+fixef(lmerCub)[2]*x+fixef(lmerCub)[3]*x^2+fixef(lmerCub)[4]*x^3
lines(x,y, col='red',lwd=3)
lines(x,y1, col='blue',lwd=3)
lmerCub2<-lmer(Rating~poly(Age, degree=3, raw=T)+(1+Age|Player), data=chess)
par(mfrow=c(1,1), bty='n',mar = c(5, 4, .1, .1), cex=1.1, pch=16)
plot(chess$Age, chess$Rating)
y=coefficients(lmCub)[1]+coefficients(lmCub)[2]*x+coefficients(lmCub)[3]*x^2+coefficients(lmCub)[4]*x^3
y1=fixef(lmerCub)[1]+fixef(lmerCub)[2]*x+fixef(lmerCub)[3]*x^2+fixef(lmerCub)[4]*x^3
y2=fixef(lmerCub2)[1]+fixef(lmerCub2)[2]*x+fixef(lmerCub2)[3]*x^2+fixef(lmerCub2)[4]*x^3
lines(x,y, col='red',lwd=3)
lines(x,y1, col='blue',lwd=3)
lines(x,y2, col='yellow',lwd=3)
lmerCub2<-lmer(Rating~poly(Age, degree=3, raw=T)*Games+(1+Age|Player), data=chess)
summary(lmerCub2)
View(chess)
chess2<-chess[chess$Age<=35,]
plot(chess2$Age, chess2$Rating)
u_init  <-  max(chess$Rating)*1.2
a_init  <-  u_init
c_init  <-  -0.30
model <- nls(chess2$Rating~u-a*(t^c),start=list(u=u_init,a=a_init,c=c_init))
model <- nls(chess2$Rating~u-a*(chess2$Age^c),start=list(u=u_init,a=a_init,c=c_init))
?nls
model <- nls(Rating~u-a*(Age^c),start=list(u=u_init,a=a_init,c=c_init),data=chess2)
summary(model)
y3=predict(model)
y3
chessPred=data.frame(Age=10:35)
y3=predict(model, newdata = chessPred)
par(mfrow=c(1,1), bty='n',mar = c(5, 4, .1, .1), cex=1.1, pch=16)
plot(chess2$Age, chess2$Rating)
lines(chessPred$Age,y3, col='yellow',lwd=3)
power=deriv(~u-a*(Age^c), namevec=c('u','a','c'), function.arg=c('Age','u','a','c'))
fit.power=nlmer(Rating~power(Age, u,a,c)~u|Player,start=list(u=u_init,a=a_init,c=c_init),data=chess2)
chess2$Player2=as.integer(chess2$Player)
fit.power=nlmer(Rating~power(Age, u,a,c)~u|Player2,start=list(u=u_init,a=a_init,c=c_init),data=chess2)
fit.power=nlmer(Rating ~ power(Age, u,a,c) ~ u|Player2,start=list(u=u_init,a=a_init,c=c_init),data=chess2)
?nlmer
fit.power=update(Rating ~ power(Age, u,a,c) ~ u|Player2,start=list(u=u_init,a=a_init,c=c_init),data=chess2)
power=deriv(~u-a*Age^c, namevec=c('u','a','c'), function.arg=c('Age','u','a','c'))
power
PowerLaw <- nls(Rating~power(Age,u,a,c),start=list(u=u_init,a=a_init,c=c_init),data=chess2)
summary(PowerLaw)
fit.power=nlmer(Rating ~ power(Age, u,a,c) ~ Player2,start=list(u=u_init,a=a_init,c=c_init),data=chess2)
fit.power=nlmer(Rating ~ power(Age, u,a,c) ~ c|Player,start=list(u=u_init,a=a_init,c=c_init),data=chess2)
fit.power=nlmer(Rating ~ power(Age, u,a,c) ~ u | Player,start=list(u=u_init,a=a_init,c=c_init),data=chess2)
chess2$Player
fit.power=nlmer(Rating ~ power(Age, u,a,c) ~ (u|Player),start=list(u=u_init,a=a_init,c=c_init),data=chess2)
fit.power=nlmer(Rating ~ power(Age, u,a,c) ~ (u|Player2)+(c|Player2),start=list(u=u_init,a=a_init,c=c_init),data=chess2)
fit.power=nlmer(Rating ~ power(Age, u,a,c) ~ 1+(u|Player2),start=list(u=u_init,a=a_init,c=c_init),data=chess2)
fit.power=nlmer(Rating ~ power(Age, u,a,c) ~ 1~(u|Player2),start=list(u=u_init,a=a_init,c=c_init),data=chess2)
table(chess2$Player2)
x = 1:100
y1 = 7 + 2 * x^0.4 + rnorm(100); plot(y1, main='y1')  # unit 1
y2 = 4 + 2 * x^0.4 + rnorm(100); plot(y2, main='y2')  # unit 2
y3 = 1 + 2 * x^0.4 + rnorm(100); plot(y3, main='y3')  # unit 3
D = data.frame(y=c(y1, y2, y3), id=rep(c(1,2,3), each=100), time=rep(x, 3))
power.f = deriv(~k + a*time^b, namevec=c('k', 'a', 'b'), function.arg=c('time','k', 'a','b'))
fit.nlmer = nlmer(y ~ power.f(time, k, a, b) ~ k|id, start=list(nlpars=c(k=2, a=1, b=1)), data=D)
summary(fit.nlmer)
str(D)
str(chess2)
chess2$Player2=as.numeric(chess2$Player)
fit.power=nlmer(Rating ~ power(Age, u,a,c) ~ (u|Player2),start=list(u=u_init,a=a_init,c=c_init),data=chess2)
chess3=chess2[,c('Rating','Age','Player2')]
str(chess3)
str(D)
power.f = deriv(~k + a*time^b, namevec=c('k', 'a', 'b'), function.arg=c('Age','k', 'a','b'))
fit.nlmer = nlmer(y ~ power.f(Age, k, a, b) ~ k|id, start=list(nlpars=c(u=u_init,a=a_init,c=c_init)), data=D)
fit.nlmer = nlmer(y ~ power.f(Age, k, a, b) ~ k|id, start=list(nlpars=c(u=u_init,a=a_init,c=c_init)), data=chess3)
fit.nlmer = nlmer(y ~ power.f(Age, k, a, b) ~ k|Player2, start=list(nlpars=c(u=u_init,a=a_init,c=c_init)), data=chess3)
fit.nlmer = nlmer(Rating ~ power.f(Age, k, a, b) ~ k|Player2, start=list(nlpars=c(u=u_init,a=a_init,c=c_init)), data=chess3)
str(chess3)
fit.nlmer = nlmer(Rating ~ power.f(Age, k, a, b) ~ k|Player2, start=list(nlpars=c(u=u_init,a=a_init,c=c_init)), data=chess3)
fit.nlmer = nlmer(Rating ~ power.f(Age, k, a, b) ~ k|Player2, start=list(nlpars=c(k=u_init,a=a_init,b=c_init)), data=chess3)
power.f = deriv(~k + a*Age^b, namevec=c('k', 'a', 'b'), function.arg=c('Age','k', 'a','b'))
fit.nlmer = nlmer(Rating ~ power.f(Age, k, a, b) ~ k|Player2, start=list(nlpars=c(k=u_init,a=a_init,b=c_init)), data=chess3)
summary(PowerLaw)
fit.nlmer = nlmer(Rating ~ power.f(Age, k, a, b) ~ k|Player2, start=list(nlpars=c(k=2089,a=51314,b=-1.5527)), data=chess3)
summary(fit.nlmer)
fit.nlmer = nlmer(Rating ~ power.f(Age, k, a, b) ~ k|Player2, start=list(nlpars=c(k=2089,a=51314,b=-1.5527)), data=chess3, control=nlmerControl(optimizer = 'NelmerMead',optCtrl = list(maxfun=10000)))
fit.nlmer = nlmer(Rating ~ power.f(Age, k, a, b) ~ k|Player2, start=list(nlpars=c(k=2089,a=51314,b=-1.5527)), data=chess3, control=nlmerControl(optimizer = 'NelderMead',optCtrl = list(maxfun=10000)))
fit.nlmer = nlmer(Rating ~ power.f(Age, k, a, b) ~ k|Player2, start=list(nlpars=c(k=2089,a=51314,b=-1.5527)), data=chess3, control=lmerControl(optimizer = 'NelderMead',optCtrl = list(maxfun=10000)))
fit.nlmer = nlmer(Rating ~ power.f(Age, k, a, b) ~ k|Player2, start=list(nlpars=c(k=2089,a=51314,b=-1.5527)), data=chess3, control=lmerControl(optimizer = 'NelderMead',optCtrl = list(maxfun=100000)))
fit.nlmer = nlmer(Rating ~ power.f(Age, k, a, b) ~ k|Player2, start=list(nlpars=c(k=2089,a=51314,b=-1.5527)), data=chess3)
fit.nlmer = nlmer(Rating ~ power.f(Age, k, a, b) ~ k|Player2, start=list(nlpars=c(k=2089,a=51314,b=-1.5527)), data=chess3, verbose=1)
fit.nlmer = nlmer(Rating ~ power.f(Age, k, a, b) ~ k|Player2, start=list(nlpars=c(k=2089,a=51314,b=-1.5527)), data=chess3, verbose=1, nAGQ=2)
fit.nlmer = nlmer(Rating ~ power.f(Age, k, a, b) ~ k|Player2, start=list(nlpars=c(k=2089,a=51314,b=-1.5527)), data=chess3, verbose=1, nAGQ=1)
fit.nlmer = nlmer(Rating ~ power.f(Age, k, a, b) ~ k|Player2, start=list(nlpars=c(k=2089,a=51314,b=-1.5527)), data=chess3, verbose=1, nAGQ=0)
fit.nlmer = nlmer(Rating ~ power.f(Age, k, a, b) ~ k|Player2, start=list(nlpars=c(k=2089,a=51314,b=-1.5527)), data=chess3, nAGQ=0)
summary(fit.nlmer)
chessPred$y4=predict(fit.nlmer, newdata=chessPred)
predit(fit.nlmer)
predict(fit.nlmer)
predict(fit.nlmer, newdata=chessPred)
chess2$Predicted=predict(fit.nlmer)
chess3=aggregate(chess2$Predicted,list(chess2$Age), mean)
summary(fit.nlmer)
power.f = deriv(~k + a*Age^b, namevec=c('k', 'a', 'b'), function.arg=c('Age','k', 'a','b'))
y4=1848-0.0008210*chessPred$Age^-1.761
y4
power.f = deriv(~k - a*Age^b, namevec=c('k', 'a', 'b'), function.arg=c('Age','k', 'a','b'))
fit.nlmer = nlmer(Rating ~ power.f(Age, k, a, b) ~ k|Player2, start=list(nlpars=c(k=2089,a=51314,b=-1.5527)), data=chess3, nAGQ=0)
View(chess3)
fit.nlmer = nlmer(Rating ~ power.f(Age, k, a, b) ~ k|Player2, start=list(nlpars=c(k=2089,a=51314,b=-1.5527)), data=chess2, nAGQ=0)
summary(fit.nlmer)
y4=1848+0.0008210*chessPred$Age^-1.761
y4
y4=1848+8210*chessPred$Age^-1.761
y4
plot(chess2$Age, chess2$Rating)
lines(chessPred$Age,y4, col='red',lwd=3)
fit.nlmer = nlmer(Rating ~ power.f(Age, k, a, b) ~ k|Player2, start=list(nlpars=c(k=2089,a=51314,b=-1.5527)), data=chess2)
summary(fit.nlmer)
fit.power=nlmer(Rating ~ power(Age, u,a,c) ~ (u|Player2),start=list(nlpars=c(u=u_init,a=a_init,c=c_init)),data=chess2)
summary(PowerLaw)
fit.power=nlmer(Rating ~ power(Age, u,a,c) ~ (u|Player2),start=list(nlpars=c(u=2089.6297,a=51314.5703,c=-1.5527)),data=chess2)
summary(fit.power)
1.848e+03-8.210e+04*chessPred$Age^-1.761e+00
Y4=1.848e+03-8.210e+04*chessPred$Age^-1.761e+00
lines(chessPred$Age,y4, col='red',lwd=3)
lines(chessPred$Age,y4, col='red',lwd=3)
lines(chessPred$Age,y4, col='red',lwd=3)
lines(chessPred$Age,Y4, col='red',lwd=3)
lines(chessPred$Age,chessPred$y3, col='yellow',lwd=3)
chessPred$y3=predict(model, newdata = chessPred)
lines(chessPred$Age,chessPred$y3, col='yellow',lwd=3)
LogGrowth<- nls(Rating ~ u / (1 + exp(a + c * time), start=list(u=u_init,a=a_init,c=c_init), data=chess2)
LogGrowth<- nls(Rating ~ u / (1 + exp(a + c * time)), start=list(u=u_init,a=a_init,c=c_init), data=chess2)
LogGrowth<- nls(Rating ~ u / (1 + exp(a + c * Age)), start=list(u=u_init,a=a_init,c=c_init), data=chess2)
LogGrowth<- nls(Rating ~ u / (1 + exp(a + c * Age)), start=list(u=u_init,a=500,c=c_init), data=chess2)
LogGrowth<- nls(Rating ~ u / (1 + exp(a + c * Age)), start=list(u=2700,a=500,c=c_init), data=chess2)
LogGrowth<- nls(Rating ~ u / (1 + exp(a + c * Age)), start=list(u=2700,a=500,c=0.2), data=chess2)
LogGrowth<- nls(Rating ~ u / (1 + exp(a + c * Age)), start=list(u=1900,a=0,c=c_init), data=chess2)
summary(LogGrowth)
chessPred$y5=predict(LogGrowth, newdata = chessPred)
par(mfrow=c(1,1), bty='n',mar = c(5, 4, .1, .1), cex=1.1, pch=16)
plot(chess2$Age, chess2$Rating)
lines(chessPred$Age,chessPred$y5, col='red',lwd=3)
AIC(LogGrowth)
AIC(PowerLaw)
anova(PowerLaw, LogGrowth)
AIC(PowerLaw, LogGrowth)
LogGrowth<- nls(Rating ~  a * (exp(-(log(Age)-c)^2 / b)), start=list(a=1900,c=35,b=c_init), data=chess)
LogGrowth<- nls(Rating ~  a * (exp(-(log(Age)-c)^2 / b)), start=list(a=1900,c=5,b=c_init), data=chess)
LogGrowth<- nls(Rating ~  a * (exp(-(abs(t-c) / b))), start=list(a=1900,c=5,b=c_init), data=chess)
LogGrowth<- nls(Rating ~  a * (exp(-(abs(Age-c) / b))), start=list(a=1900,c=5,b=c_init), data=chess)
LogGrowth<- nls(Rating ~  a * (exp(-(abs(Age-c) / b))), start=list(a=1900,c=35,b=c_init), data=chess)
LogGrowth<- nls(Rating ~  a * (exp(-(abs(Age-c) / b))), start=list(a=1900,c=35,b=1), data=chess)
summary(LogGrowth)
chessPred2=data.frame(Age=10:80)
chessPred2$y1=predict(LogGrowth, newdata=chessPred2)
plot(chessPred2$Age, chessPred2$y1)
plot(chess$Age, chess$Rating)
lines(chessPred2$Age, chessPred2$y1)
lines(chessPred2$Age, chessPred2$y1, col='red')
lines(chessPred2$Age, chessPred2$y1, col='red', lwd=2)
nonlin <- function(t, a, bl, br, c) {
ifelse(t < c, a * exp((t-c) / bl), a * exp(-(t-c) / br))
}
nonlin <- function(t, a, bl, br, c) {
ifelse(t < c, a * exp((t-c) / bl), a * exp(-(t-c) / br))
}
nlsfit <- nls(Ratng ~ nonlin(Age, a, bl, br, c), data=test, start=list(a=1900, bl=20, br=20, c=35))
nlsfit <- nls(Rating ~ nonlin(Age, a, bl, br, c), data=test, start=list(a=1900, bl=20, br=20, c=35))
nlsfit <- nls(Rating ~ nonlin(Age, a, bl, br, c), data=chess, start=list(a=1900, bl=20, br=20, c=35))
summary(nlsfit)
chessPred2$y2=predict(nlsfit, newdata=chessPred2)
lines(chessPred2$Age, chessPred2$y2, col='red', lwd=2)
nonlin <- function(t, a, bl, br, c) {
a * (exp(-(log(t)-c)^2 / b)))
}
nonlin <- function(t, a, b, c) {
a * (exp(-(log(t)-c)^2 / b)))
}
nonlin <- function(t, a, b, c) {a * (exp(-(log(t)-c)^2 / b)))}
nonlin <- function(t, a, b, c) {a * (exp(-(log(t)-c)^2 / b))}
nlsfit <- nls(Rating ~ nonlin(Age, a, b, c), data=chess, start=list(a=1900, bl=20, br=20, c=35))
nlsfit <- nls(Rating ~ nonlin(Age, a, b, c), data=chess, start=list(a=1900, b=20, c=35))
nlsfit <- nls(Rating ~ nonlin(Age, a, b, c), data=chess, start=list(a=1900, b=20, c=4))
plot(1900 * (exp(-(log(chess$Age)-4)^2 / 20)))
plot(25 * (exp(-(log(chess$Age)-4)^2 / 20)))
plot(1900 * (exp(-(log(chess$Age)-2)^2 / 20)))
plot(1900 * (exp(-(log(chess$Age)-3)^2 / 20)))
plot(1900 * (exp(-(log(chess$Age)-3.2)^2 / 20)))
plot(1900 * (exp(-(log(chess$Age)-3.2)^2 / 10)))
plot(1900 * (exp(-(log(chess$Age)-3.2)^2 / 50)))
plot(1900 * (exp(-(log(chess$Age)-3.2)^2 / 100)))
plot(1900 * (exp(-(log(chess$Age)-3.2)^2 / 1)))
plot(1900 * (exp(-(log(chess$Age)-3.2)^2 / 0.4)))
plot(1900 * (exp(-(log(chess$Age)-3.2)^2.4 / 0.4)))
plot(1900 * (exp(-(log(chess$Age)-3.2)^2.1 / 0.4)))
plot(1900 * (exp(-(log(chess$Age)-3.2)^0.1 / 0.4)))
plot(1900 * (exp(-(log(chess$Age)-3.2)^5 / 0.4)))
plot(1900 * (exp(-(log(chess$Age)-3.2)^2 / 0.4)))
plot(1900 * (exp(-(log(chess$Age)-3.1)^2 / 0.4)))
plot(1900 * (exp(-(log(chess$Age)-4)^2 / 0.4)))
plot(1900 * (exp(-(log(chess$Age)-3.8)^2 / 0.4)))
nlsfit <- nls(Rating ~ nonlin(Age, a, b, c), data=chess, start=list(a=1900, b=0.4, c=-3.8))
nlsfit <- nls(Rating ~ nonlin(Age, a, b, c), data=chess, start=list(a=1900, b=0, c=-3.8))
nlsfit <- nls(Rating ~ nonlin(Age, a, b, c), data=chess, start=list(a=1900, b=0, c=-3))
nlsfit <- nls(Rating ~ nonlin(Age, a, b, c), data=chess, start=list(a=1900, b=10, c=-3.8))
plot(1900 * (exp(-(log(chess$Age)-3.8)^2 / 10)))
plot(1900 * (exp(-(log(chess$Age)-3.8)^2 / 0)))
plot(1900 * (exp(-(log(chess$Age)-3.8)^2 / 0.2)))
plot(1900 * (exp(-(log(chess$Age)-3.8)^2 / 0.8)))
plot(1900 * (exp(-(log(chess$Age)-3.8)^2 / 0.4)))
plot(2000 * (exp(-(log(chess$Age)-3.8)^2 / 0.4)))
plot(2000 * (exp(-(log(chess$Age)-3.7)^2 / 0.4)))
plot(2000 * (exp(-(log(chess$Age)-3.6)^2 / 0.4)))
nlsfit <- nls(Rating ~ nonlin(Age, a, b, c), data=chess, start=list(a=2000, b=0.4, c=-3.6))
nonlin <- function(t, a, b, c) { (a/b) * exp( -(t-c)/b - exp(-(t-c)/b) ) }
nlsfit <- nls(Rating ~ nonlin(Age, a, b, c), data=chess, start=list(a=2000, b=0.4, c=-3.6))
nlsfit <- nls(Rating ~ nonlin(Age, a, b, c), data=chess, start=list(a=2000, b=50, c=35))
summary(nlsfit)
chessPred2$y3=predict(nlsfit, newdata = chessPred2)
plot(chess2$Age, chess2$Rating)
lines(chessPred2$Age,chessPred2$y3, col='red',lwd=3)
plot(chess$Age, chess$Rating)
lines(chessPred2$Age,chessPred2$y3, col='red',lwd=3)
nlsfit <- nls(Rating ~ nonlin(Age, a, b, c), data=chess, start=list(a=2000, b=50, c=35))
plot(chess$Age, chess$Rating)
lines(chessPred2$Age,chessPred2$y3, col='red',lwd=3)
require(mgcv)
gam1<-gam(Rating~s(Age), data=chess)
summary(gam1)
require(itsadug)
plot_smooth(gam1, view='Age')
fvisgam(gam1, view='Age')
?gam
require(mgcv)
gam1<-gam(Rating~s(Age, bs='cs'), data=chess)
plot_smooth(gam1, view='Age')
?plot_smooth
plot_smooth(gam1, view='Age', rm.ranef = F)
summary(gam1)
require(mgcv)
gam1<-gam(Rating~s(Age)+s(Player, bs='re'), data=chess)
summary(gam1)
plot_smooth(gam1, view='Age', rm.ranef = F)
plot_smooth(gam1, view='Age')
plot_smooth(gam1, view='Age', plot_all = T)
plot_smooth(gam1, view='Age', plot_all = 'Player')
plot_smooth(gam1, view='Age')
points(chess$Age, chess$Rating)
plot_smooth(gam1, view='Age', ylim=c(0,2800))
points(chess$Age, chess$Rating, ylim=c(0,2800))
gam2<-gam(Rating~te(Age,Games, bs='cs'), data=chess)
fvisgam(gam2, view=c('Age','Games'))
fvisgam(gam2, view=c('Age','Games'), rm.ranef = F)
View(chess)
gam2<-gam(Rating~te(Age,Birth, bs='cs'), data=chess)
fvisgam(gam2, view=c('Age','Birth'), rm.ranef = F)
fvisgam(gam2, view=c('Age','Birth'), rm.ranef = F, too.far=.1)
fvisgam(gam2, view=c('Age','Birth'), rm.ranef = F, too.far=.01)
fvisgam(gam2, view=c('Age','Birth'), rm.ranef = F, too.far=.1)
gam2<-gam(Rating~te(Age,Games, bs='cs'), data=chess)
fvisgam(gam2, view=c('Age','Games'), rm.ranef = F, too.far = .1)
gam2<-gam(Rating~te(Age,Games), data=chess)
fvisgam(gam2, view=c('Age','Games'), rm.ranef = F, too.far = .1)
gam2<-gam(Rating~te(Age,Stale), data=chess)
fvisgam(gam2, view=c('Age','Stale'), rm.ranef = F, too.far = .1)
fvisgam(gam2, view=c('Age','Stale'), rm.ranef = F)
fvisgam(gam2, view=c('Age','Stale'), rm.ranef = F, too.far = .1)
fvisgam(gam2, view=c('Age','Stale'), rm.ranef = F, too.far = .05)
fvisgam(gam2, view=c('Age','Stale'), rm.ranef = F, too.far = .4)
fvisgam(gam2, view=c('Age','Stale'), rm.ranef = F, too.far = .15)
gam2<-gam(Rating~te(Age,Stale, bs='cs'), data=chess)
fvisgam(gam2, view=c('Age','Stale'), rm.ranef = F, too.far = .15)
fvisgam(gam2, view=c('Age','Stale'), rm.ranef = F, too.far = .1)
gam2<-gam(Rating~te(Age,Games), data=chess)
fvisgam(gam2, view=c('Age','Stale'), rm.ranef = F, too.far = .1)
gam2<-gam(Rating~te(Age,Stale), data=chess)
fvisgam(gam2, view=c('Age','Stale'), rm.ranef = F, too.far = .1)
fvisgam(gam2, view=c('Age','Stale'), rm.ranef = F, too.far = .14)
fvisgam(gam2, view=c('Age','Stale'), rm.ranef = F, too.far = .15)
fvisgam(gam2, view=c('Age','Stale'), rm.ranef = F, too.far = .1)
PowerRU=1.848e+03-8.210e+04*chessPred$Age^-1.761e+00
lines(chessPred$Age,chessPred$PowerRU, col='blue',lwd=3)
plot(chess2$Age, chess2$Rating)
lines(chessPred$Age,chessPred$PowerRU, col='blue',lwd=3)
View(chessPred)
lines(chessPred$Age,PowerRU, col='blue',lwd=3)
chess<-read.table('ChessDevelopment.txt',sep='\t', header=T)
chess2<-chess[chess$Age<=35,]
LogGrowth<- nls(Rating ~ u / (1 + a*exp(c * Age)),
start=list(u=1900,a=0,c=c_init), data=chess2)
u_init  <-  max(chess$Rating)*1.2
a_init  <-  u_init
c_init  <-  -0.30
start=list(u=1900,a=0,c=c_init), data=chess2)
LogGrowth<- nls(Rating ~ u / (1 + a*exp(c * Age)),
start=list(u=1900,a=0,c=c_init), data=chess2)
LogGrowth<- nls(Rating ~ u / (1 + a*exp(c * Age)),
start=list(u=1900,a=1,c=c_init), data=chess2)
LogGrowth<- nls(Rating ~ u / (1 + a*exp(c * Age)),
start=list(u=1900,a=500,c=c_init), data=chess2)
summary(LogGrowth)
chessPred$Growth=predict(LogGrowth, newdata = chessPred)
par(mfrow=c(1,1), bty='n', mar = c(5, 4, .1, .1), cex=1.1, pch=16)
plot(chess2$Age, chess2$Rating)
chessPred=data.frame(Age=10:35)
chessPred$Growth=predict(LogGrowth, newdata = chessPred)
par(mfrow=c(1,1), bty='n', mar = c(5, 4, .1, .1), cex=1.1, pch=16)
plot(chess2$Age, chess2$Rating)
lines(chessPred$Age,chessPred$Growth, col='blue',lwd=3)
chessPred$Growth=predict(LogGrowth, newdata = chessPred)
par(mfrow=c(1,1), bty='n', mar = c(5, 4, .1, .1), cex=1.1, pch=16)
plot(chess2$Age, chess2$Rating)
lines(chessPred$Age,chessPred$Growth, col='blue',lwd=3)
u_init  <-  max(chess$Rating)*1.2
a_init  <-  u_init
c_init  <-  -0.30
PowerLaw <- nls(Rating~u-a*(Age^c),start=list(u=u_init,a=a_init,c=c_init),data=chess2)
summary(PowerLaw)
chessPred$Power=predict(PowerLaw, newdata = chessPred)
par(mfrow=c(1,1), bty='n',mar = c(5, 4, .1, .1), cex=1.1, pch=16)
plot(chess2$Age, chess2$Rating)
lines(chessPred$Age,chessPred$Power, col='red',lwd=3)
chessPred$Growth=predict(LogGrowth, newdata = chessPred)
par(mfrow=c(1,1), bty='n', mar = c(5, 4, .1, .1), cex=1.1, pch=16)
plot(chess2$Age, chess2$Rating)
lines(chessPred$Age, chessPred$Power, col='red', lwd=3)
lines(chessPred$Age,chessPred$Growth, col='blue',lwd=3)
AIC(PowerLaw, LogGrowth)
BIC(PowerLaw, LogGrowth)
2089/(1+51314.5649)
